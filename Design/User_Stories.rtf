{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww35640\viewh19300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \
Assignment \
\pard\pardeftab560\partightenfactor0

\f1\b0\fs26 \cf0 \
We would like you to complete a small Android project. Below is a list of the requirements for this project.\'a0Below is a list of the requirements for this project.\'a0\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Please use the following requirements to create a basic Android application:\
1.\'a0\'a0\'a0\'a0\'a0\'a0 A minimum of 2 screens (a detail screen and a list screen)\
2. \'a0 \'a0 \'a0List screen should be populated by the sample api end point(\'a0{\field{\*\fldinst{HYPERLINK "https://fake-json-api.mock.beeceptor.com/users"}}{\fldrslt \ul https://fake-json-api.mock.beeceptor.com/users}}). For any reason if this doesn't work use any public api endpoints. Ex:\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/public-apis/public-apis"}}{\fldrslt \ul https://github.com/public-apis/public-apis}}\
3.\'a0\'a0\'a0\'a0\'a0\'a0 Build this is a modularized architecture (even though this is a small project), using compose, kotlin, DI (either Dagger, Koin or Hilt), coroutines\
4.\'a0\'a0\'a0\'a0\'a0\'a0 Include unit tests\
5. \'a0 \'a0 \'a0 Include a ReadMe file with technologies used, any assumptions and/or improvements, please remember that this does not need to be a complete project!\

\f2\i Note: The content on the screens is not important and please do not spend a lot of time on this app (between 6 - 8 hours max)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i0\b\fs24 \cf0 \
\
\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Based on the given assignment, I have analyzed the requirements and outlined the following User Stories and Acceptance Criteria. In a real development environment, each user story should be tracked via a dedicated JIRA ticket, and work should begin in a corresponding feature branch linked to that ticket for better traceability.\
I also aim to follow clean code repository guidelines. Each user story will be implemented in a separate branch, and every pull request (PR) will include a single commit to keep the history clean and support easier cherry-picking when required. If needed, commits can be squashed during merge for better maintainability.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
Story 1: Setting Up the Project with Clean Architecture
\f3\b0 \
As a developer building a robust app,\
I want to organize my project using clean architecture and modularization,\
So that it\'92s easier to test, scale, and maintain over time.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Code is separated into `ui`, `presentation`, `domain`, and `data` modules.\
- Presentation follows MVVM pattern.\
- Layers only depend on the layer directly below them.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f0\b Story 2: Dependency Injection with Hilt
\f3\b0 \
As a developer,\
I want to use Hilt for dependency injection,\
So that I don\'92t need to manage object creation manually.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Hilt is initialized in the Application class.\
- Dependencies (ViewModels, Repositories, UseCases, etc.) are injected via constructors.\
- Proper DI modules are created for networking, DB, and app-level components.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 3: Fetching Users from API
\f3\b0 \
As a user,\
I want to see a list of users fetched from a remote API,\
So that I can browse through them conveniently.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Retrofit is used to call `https://fake-json-api.mock.beeceptor.com/users`.\
- The result is parsed and shown using Compose.\
- A fallback or alternate API is used if the main one fails.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 4: Working Offline with Room
\f3\b0 \
As a user,\
I want to still view users even without internet,\
So that I don\'92t lose access to important info.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- User data is saved to Room DB upon API success.\
- If offline, the list shows the last cached data.\
- The sync process is seamless in the background.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 5: Displaying Users in a List
\f3\b0 \
As a user,\
I want to see all users in a scrollable list,\
So that I can pick one to view more details.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Compose LazyColumn is used to display the list.\
- Items include avatar, name, and email.\
- Clicking an item navigates to a detail screen.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 6: User Detail Screen
\f3\b0 \
As a user,\
I want to see detailed information for each user,\
So that I can understand more than just their name and email.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Shows full details: name, phone, address, email, company, etc.\
- UI is clean and readable.\
- Back navigation works properly.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 7: Retrying Failed API Requests
\f3\b0 \
As a user,\
I want the app to try again automatically when a request fails,\
So that I don\'92t have to retry manually.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- Retrofit calls are wrapped in a `Flow`.\
- `retryWhen` operator is used for retry logic with delay.\
- Error/loading states are handled with user feedback.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 8: Unit Testing
\f3\b0 \
As a developer,\
I want to test the app's logic thoroughly,\
So that I can be confident my code works correctly and is maintainable.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- ViewModels and UseCases are unit tested.\
- Repositories are mocked/faked for isolated tests.\
- Error and success scenarios are covered.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Story 9: Helpful README
\f3\b0 \
As a developer or reviewer,\
I want a clear README that explains the project setup and structure,\
So that I can quickly understand the goals and tech choices.\
\

\f0\b Acceptance Criteria:
\f3\b0 \
- README includes tech stack, architecture diagram, and setup steps.\
- Mentions any design decisions or known limitations.\
- Lists future improvement ideas if applicable.\
\
}